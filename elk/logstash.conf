input {
  beats {
    port => 5044
  }
  file {
    path => "/usr/share/logstash/ingest_data/*"
    start_position => "beginning"
  }
}

filter {
  # Parsing Nginx Access Logs
  if [type] == "nginx-access" {
    grok {
      match => { 
        "message" => "%{IPORHOST:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:time_local}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?)\" %{NUMBER:status} %{NUMBER:body_bytes_sent} \"(?:%{NOTSPACE:http_referer}|-)\" \"(?:%{DATA:http_user_agent}|-)\" \"(?:%{IPORHOST:http_x_forwarded_for}|-)\"" 
      }
    }
    # Add GeoIP information based on the remote address
    geoip {
      source => "remote_addr"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
      add_field => { "log_type" => "nginx_access" }
    }

    # Parse user-agent string only if it's a valid string
    if [http_user_agent] and [http_user_agent] =~ /^[a-zA-Z]/ {
      useragent {
        source => "http_user_agent"
        target => "user_agent"
      }
    }
  }}
  
  # Parsing Nginx Error Logs
  else if [type] == "nginx-error" {
    grok {
      match => { 
        "message" => "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME:timestamp} \[%{WORD:loglevel}\] %{NUMBER:pid}#%{NUMBER}: \*(?:%{NUMBER:connection_id}) %{GREEDYDATA:error_message}, client: %{IPORHOST:client_ip}, server: %{GREEDYDATA:server}, request: \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:http_version}\", upstream: \"%{URI:upstream}\", host: \"%{IPORHOST:host}\", referrer: \"(?:%{URI:referrer}|-)\""
      }
    }
    mutate {
      add_field => { "log_type" => "nginx_error" }
    }
  }
  
  # Parsing Syslog Logs
  else if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGLINE}" }
    }
    mutate {
      add_field => { "log_type" => "syslog" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["https://elasticsearch:9200"]
    index => "logstash-%{+YYYY.MM.dd}"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    ssl => true
    ssl_certificate_authorities => ["certs/ca/ca.crt"]
  }
 stdout { codec => rubydebug }
}

