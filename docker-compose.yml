volumes:
  certs:
    driver: local
  es_data:
    driver: local
  kibana_data:
    driver: local
  metricbeat_data:
    driver: local
  filebeat_data:
    driver: local
  logstash_data:
    driver: local
  postgres_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs: 
    driver: local

networks:
  default:
    name: beepong
    external: false

services:
  db:
    image: postgres:16
    container_name: beepong-postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    env_file:
      - .env
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "postgres"
        env: ".env"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER} -d ${POSTGRES_DB} --password ${POSTGRES_PASSWORD}"] 
      # interval: 10s
      timeout: 5s
      retries: 5

  backend_dummy:
    container_name: beepong-backendDummy
    build:
      context: ./srcs/backend
    volumes:
      - ./srcs/backend/beePong:/usr/src/backend/beePong
      - app_logs:/beePong/logs  # Mount application logs volume
    env_file:
      - .env
    ports:
      - "8000:8000"
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "backend_dummy"
        env: ".env"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/ || exit 1"]
      # interval: 30s
      timeout: 10s
      retries: 5
    restart: on-failure

  nginx:
    container_name: beepong-nginx
    build:
      context: ./srcs/nginx
    volumes:
      - ./srcs/frontend:/var/www/html
      - nginx_logs:/var/log/nginx 
    ports:
      - 443:443
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "nginx"
        env: ".env"
    restart: on-failure
    depends_on:
      backend_dummy:
        condition: service_healthy
    
  jest:
    container_name: beepong-jest
    build:
      context: srcs/frontend
      dockerfile: tests/Dockerfile

  cypress:
    container_name: beepong-cypress
    build:
      context: ./cypress
      dockerfile: Dockerfile
    environment:
      - CYPRESS_baseUrl=https://nginx
      - CYPRESS_BROWSER=${CYPRESS_BROWSER:-chrome}
    volumes:
      - ./cypress/screenshots:/app/cypress/screenshots
      - ./cypress/videos:/app/cypress/videos
    depends_on:
      - nginx
      - CYPRESS_BROWSER=${CYPRESS_BROWSER:-chrome}
    depends_on:
      - nginx
    entrypoint: ["/bin/sh", "-c"]
    command: ["npx cypress run --browser ${CYPRESS_BROWSER:-chrome}"]

  pgadmin:
    container_name: beepong-pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - db

  setup:
    container_name: beepong-setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ./elk/index_policies:/policies
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elasticsearch\n"\
          "    dns:\n"\
          "      - elasticsearch\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Waiting for Kibana to become available";
        until curl -s --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" https://kibana:5601/api/status > /dev/null; do
          echo "Kibana not available yet, retrying in 5 seconds...";
          sleep 5;
        done;

        echo "Kibana is available, waiting for full initialization...";
        
        # Wait for additional time to ensure all plugins and services in Kibana are ready
        sleep 20

        echo ""
        echo "Creating ILM policies:"
        curl -X PUT "https://elasticsearch:9200/_ilm/policy/Backend-logs-index-policy" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          --cacert config/certs/ca/ca.crt \
          -d @/policies/backend_policy.json
  
        curl -X PUT "https://elasticsearch:9200/_ilm/policy/Nginx-logs-index-policy" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          --cacert config/certs/ca/ca.crt \
          -d @/policies/nginx_policy.json
  
        curl -X PUT "https://elasticsearch:9200/_ilm/policy/Postgres-logs-index-policy" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          --cacert config/certs/ca/ca.crt \
          -d @/policies/postgres_policy.json

        sleep 10
        echo ""
        echo "Creating Kibana data views:"
        curl -s -X POST --cacert config/certs/ca/ca.crt "https://kibana:5601/api/data_views/data_view" \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -d "{\"data_view\": {\"title\": \"backend-logs-*\", \"timeFieldName\": \"@timestamp\"}}"
        
        curl -s -X POST --cacert config/certs/ca/ca.crt "https://kibana:5601/api/data_views/data_view" \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -d "{\"data_view\": {\"title\": \"nginx-logs-*\", \"timeFieldName\": \"@timestamp\"}}"
        
        curl -s -X POST --cacert config/certs/ca/ca.crt "https://kibana:5601/api/data_views/data_view" \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -d "{\"data_view\": {\"title\": \"postgres-logs-*\", \"timeFieldName\": \"@timestamp\"}}"
        
        curl -s -X POST --cacert config/certs/ca/ca.crt "https://kibana:5601/api/data_views/data_view" \
          -H "kbn-xsrf: true" \
          -H "Content-Type: application/json" \
          -u "elastic:${ELASTIC_PASSWORD}" \
          -d "{\"data_view\": {\"title\": \"metricbeat-*\", \"timeFieldName\": \"@timestamp\"}}"
        
        echo ""
        echo "All done!";
        echo ""
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elasticsearch/elasticsearch.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    container_name: beepong-elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - es_data:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
   # ulimits:
   #   memlock:
   #     soft: -1
   #     hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt 'https://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s' -u 'elastic:${ELASTIC_PASSWORD}'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    container_name: beepong-kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -I -s --cacert config/certs/ca/ca.crt https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat:
    container_name: beepong-metricbeat
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeat_data:/usr/share/metricbeat/data
      - "./elk/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
      - CA_CERT=certs/ca/ca.crt
      - ES_CERT=certs/elasticsearch/elasticsearch.crt
      - ES_KEY=certs/elasticsearch/elasticsearch.key
      - KB_CERT=certs/kibana/kibana.crt
      - KB_KEY=certs/kibana/kibana.key
    command:
      -strict.perms=false        

  logstash:
    container_name: beepong-logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    ports:
      - "12201:12201/udp"
    volumes:
      - certs:/usr/share/logstash/certs
      - logstash_data:/usr/share/logstash/data
      - nginx_logs:/usr/share/logstash/ingest_data/
      - "./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
